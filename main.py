import tkinter as tk
from tkinter import messagebox
import copy

class SixPawnsGame:
    def __init__(self, root):
        self.root = root
        self.root.title("6 –ü–µ—à–µ–∫: –ò–≥—Ä–æ–∫ (W) vs AI (B) - Minimax")

        self.board = ['W'] * 6 + ['.'] + ['B'] * 6
        self.buttons = []
        self.selected_index = None
        self.player_first = True
        self.is_player_turn = True

        self.board_frame = tk.Frame(root)
        self.status_label = tk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ –±–µ–ª—É—é —Ñ–∏–≥—É—Ä—É (W)", font=("Arial", 14))

        self.create_menu()

    def start_game(self):
        self.status_label.pack(pady=10)
        self.board_frame.pack()
        self.draw_board()
        self.is_player_turn = self.player_first
        self.update_status()
        if not self.player_first:
            self.root.after(500, self.ai_move_minimax)

    def create_menu(self):
        top = tk.Toplevel(self.root)
        top.title("–í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞")
        tk.Label(top, text="–ö—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º?", font=("Arial", 14)).pack(pady=10)
        tk.Button(top, text="–ò–≥—Ä–æ–∫ (W)", font=("Arial", 12), command=lambda: self.set_first_player(True, top)).pack(pady=5)
        tk.Button(top, text="–ò–ò (B)", font=("Arial", 12), command=lambda: self.set_first_player(False, top)).pack(pady=5)

    def set_first_player(self, is_player, window):
        self.player_first = is_player
        window.destroy()
        self.start_game()

    def draw_board(self):
        for widget in self.board_frame.winfo_children():
            widget.destroy()

        self.buttons = []
        possible_moves = self.get_possible_moves('W') if self.is_player_turn else []
        for i, cell in enumerate(self.board):
            color = 'white'
            if self.selected_index is not None:
                # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
                if i == self.selected_index:
                    color = 'lightblue'
                # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤
                elif (self.selected_index, i) in possible_moves:
                    color = 'lightgreen'

            btn = tk.Button(
                self.board_frame,
                text=cell,
                width=4,
                height=2,
                font=("Arial", 16),
                bg=color,
                command=lambda i=i: self.on_cell_click(i)
            )
            btn.grid(row=0, column=i, padx=2, pady=2)
            self.buttons.append(btn)

    def update_status(self, message=None):
        if message:
            self.status_label.config(text=message)
            return
        if self.is_player_turn:
            self.status_label.config(text="–í–∞—à —Ö–æ–¥ (W). –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É.")
        else:
            self.status_label.config(text="–•–æ–¥ –ò–ò (B)...")

    def on_cell_click(self, index):
        if not self.is_player_turn:
            return

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É ‚Äî –≤—ã–±—Ä–∞—Ç—å –µ—ë
        if self.selected_index is None:
            if self.board[index] == 'W':
                self.selected_index = index
                self.status_label.config(text=f"–í—ã–±—Ä–∞–Ω–∞ —Ñ–∏–≥—É—Ä–∞ W –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {index}")
                self.draw_board()
        else:
            # –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Ç–æ–π –∂–µ —Ñ–∏–≥—É—Ä–µ ‚Äî –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
            if index == self.selected_index:
                self.selected_index = None
                self.update_status()
                self.draw_board()
                return

            # –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
            if self.try_move(self.board, self.selected_index, index, 'W'):
                self.draw_board()
                if self.check_win(self.board):
                    messagebox.showinfo("–ü–æ–±–µ–¥–∞", "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
                    self.root.quit()
                else:
                    self.is_player_turn = False
                    self.selected_index = None
                    self.update_status()
                    self.root.after(500, self.ai_move_minimax)
            else:
                self.status_label.config(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥!")
                self.draw_board()
                self.selected_index = None
                self.update_status()

    def try_move(self, board, from_index, to_index, player):
        if board[to_index] != '.':
            return False

        direction = 1 if player == 'W' else -1

        # –ü—Ä–æ—Å—Ç–æ–π —Ö–æ–¥ –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –≤–ø–µ—Ä–µ–¥
        if to_index == from_index + direction:
            self.make_move(board, from_index, to_index)
            return True

        # –ü—Ä—ã–∂–æ–∫ —á–µ—Ä–µ–∑ —Ñ–∏–≥—É—Ä—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        if to_index == from_index + 2 * direction:
            mid_index = from_index + direction
            # –ü—Ä—ã–∂–æ–∫ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            opponent = 'B' if player == 'W' else 'W'
            if board[mid_index] == opponent and board[to_index] == '.':
                self.make_move(board, from_index, to_index)
                return True

        return False

    def make_move(self, board, from_index, to_index):
        board[to_index] = board[from_index]
        board[from_index] = '.'

    def check_win(self, board):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∏–≥—É—Ä—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        return board == ['B'] * 6 + ['.'] + ['W'] * 6

    def ai_move_minimax(self):
        moves = self.get_possible_moves('B')
        if not moves:
            messagebox.showinfo("–ü–æ–±–µ–¥–∞", "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! (–ò–ò —Å–¥–∞–ª—Å—è)")
            self.root.quit()
            return

        _, move = self.minimax(self.board, 4, True)
        if move:
            self.try_move(self.board, move[0], move[1], 'B')
            self.draw_board()
            if self.check_win(self.board):
                messagebox.showinfo("–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "–ò–ò –ø–æ–±–µ–¥–∏–ª!")
                self.root.quit()
            else:
                self.is_player_turn = True
                self.update_status()
        else:
            # –ù–µ—Ç —Ö–æ–¥–æ–≤ ‚Äî –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
            messagebox.showinfo("–ü–æ–±–µ–¥–∞", "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! (–ò–ò –Ω–µ –Ω–∞—à—ë–ª —Ö–æ–¥–æ–≤)")
            self.root.quit()

    def evaluate(self, board):
        # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª –ò–ò ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if board == ['B'] * 6 + ['.'] + ['W'] * 6:
            return 9999
        # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä–æ–∫ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if board == ['W'] * 6 + ['.'] + ['B'] * 6:
            return -9999
        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –ø–æ–∑–∏—Ü–∏–π –¥–ª—è B –∏ W (—á–µ–º –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏ ‚Äî —Ç–µ–º –ª—É—á—à–µ)
        b_score = sum((12 - i) for i, p in enumerate(board) if p == 'B')
        w_score = sum(i for i, p in enumerate(board) if p == 'W')
        return b_score - w_score

    def get_possible_moves(self, player):
        moves = []
        direction = 1 if player == 'W' else -1
        for i, piece in enumerate(self.board):
            if piece != player:
                continue
            one_step = i + direction
            if 0 <= one_step < len(self.board) and self.board[one_step] == '.' and one_step - i == direction:
                moves.append((i, one_step))
            jump_step = i + 2 * direction
            opponent = 'B' if player == 'W' else 'W'
            if (
                0 <= jump_step < len(self.board)
                and self.board[i + direction] == opponent
                and self.board[jump_step] == '.'
                and jump_step - i == 2 * direction
            ):
                moves.append((i, jump_step))
        return moves

    def generate_moves(self, board, player):
        moves = []
        direction = 1 if player == 'W' else -1
        for i, piece in enumerate(board):
            if piece != player:
                continue
            one_step = i + direction
            if 0 <= one_step < len(board) and board[one_step] == '.' and one_step - i == direction:
                new_board = copy.deepcopy(board)
                self.make_move(new_board, i, one_step)
                moves.append((new_board, (i, one_step), 1))  # 1 ‚Äî –ø—Ä–æ—Å—Ç–æ–π —à–∞–≥
            jump_step = i + 2 * direction
            opponent = 'B' if player == 'W' else 'W'
            if (
                0 <= jump_step < len(board)
                and board[i + direction] == opponent
                and board[jump_step] == '.'
                and jump_step - i == 2 * direction
            ):
                new_board = copy.deepcopy(board)
                self.make_move(new_board, i, jump_step)
                moves.append((new_board, (i, jump_step), 2))  # 2 ‚Äî –ø—Ä—ã–∂–æ–∫
        return moves

    def minimax(self, board, depth, maximizing_player):
        if depth == 0 or self.check_win(board):
            return self.evaluate(board), None

        player = 'B' if maximizing_player else 'W'
        best_move = None

        if maximizing_player:
            max_eval = float('-inf')
            for new_board, move, move_type in self.generate_moves(board, player):
                eval, _ = self.minimax(new_board, depth - 1, False)
                # –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä—ã–∂–æ–∫ (—á—Ç–æ–±—ã –ò–ò –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–ª –ø—Ä–æ—Å—Ç—ã–µ —Ö–æ–¥—ã)
                if move_type == 2:
                    eval -= 5
                if eval > max_eval:
                    max_eval = eval
                    best_move = move
            return max_eval, best_move
        else:
            min_eval = float('inf')
            for new_board, move, move_type in self.generate_moves(board, player):
                eval, _ = self.minimax(new_board, depth - 1, True)
                if move_type == 2:
                    eval += 5
                if eval < min_eval:
                    min_eval = eval
                    best_move = move
            return min_eval, best_move

if __name__ == "__main__":
    root = tk.Tk()
    game = SixPawnsGame(root)
    root.mainloop()
